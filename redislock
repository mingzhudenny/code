package com.itutorgroup.tutorabc.activity.aspect;


import com.itutorgroup.tutorabc.activity.annotation.VIPCacheLock;
import com.itutorgroup.tutorabc.activity.component.VIPCacheCloudSupport;
import com.vipabc.basic.common.cachecloud.utils.CacheCloudRedisUtils;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.Signature;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.reflect.MethodSignature;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
import org.springframework.expression.ExpressionParser;
import org.springframework.expression.spel.standard.SpelExpressionParser;
import org.springframework.expression.spel.support.StandardEvaluationContext;
import org.springframework.stereotype.Component;

import java.lang.reflect.Method;
import java.lang.reflect.Type;

@Component
@Aspect
public class VIPCacheLockAspect {
    private final Logger logger = LoggerFactory.getLogger(getClass());

    @Autowired
    CacheCloudRedisUtils redis;
    
	@Autowired
    VIPCacheCloudSupport cacheCloudSupport;

    /**
     * 定义缓存逻辑
     *
     * @throws Throwable
     */
    @Around("@annotation(com.itutorgroup.tutorabc.activity.annotation.VIPCacheLock)")
    public Object cache(ProceedingJoinPoint pjp) throws Throwable {
        Method method = getMethod(pjp);
        VIPCacheLock cacheLock = method.getAnnotation(VIPCacheLock.class);
        LocalVariableTableParameterNameDiscoverer u = new LocalVariableTableParameterNameDiscoverer();
        String[] paraNameArr = u.getParameterNames(method);
        Object[] args = pjp.getArgs();

        //获取方法的返回类型,让缓存可以返回正确的类型
        Class returnType = ((MethodSignature) pjp.getSignature()).getReturnType();
        //获取返回值的类型，返回值只能是一个  
        Type genericReturnType = method.getGenericReturnType();
        //Type[] actualTypeArguments = ((ParameterizedType)genericReturnType).getActualTypeArguments(); 

        //SPEL上下文
        StandardEvaluationContext context = new StandardEvaluationContext();
        ExpressionParser parser = new SpelExpressionParser();
        //把方法参数放入SPEL上下文中
        for (int i = 0; i < paraNameArr.length; i++) {
            context.setVariable(paraNameArr[i], args[i]);
        }
        
        String key = cacheLock.key();
        int lockTime = cacheLock.expireTime();
        int retry = cacheLock.retry();
        
        if (paraNameArr.length > 0) {
            key = parser.parseExpression(cacheLock.key()).getValue(context, String.class);
            logger.info("VIPCacheLock.key : {}", key);
        }
        //获取锁的时候进行间隔100ms的重试
        boolean ownLock = false;
        if(retry<1)retry=1;
        for(int i=0;i<retry;i++) {
            if(cacheCloudSupport.lock(key, lockTime)) {
                ownLock = true;
                break;
            }else {
                Thread.sleep(100);
            }
        }
        if(!ownLock) {
            throw new RuntimeException("网络拥堵,请稍后重试!");
        }
        try {
            return pjp.proceed();
        } catch (Exception e) {
            throw e;
        }finally {
        	cacheCloudSupport.unLock(key);
        }

    }

    /**
     * 获取被拦截方法对象
     * <p>
     * MethodSignature.getMethod() 获取的是顶层接口或者父类的方法对象
     * 而缓存的注解在实现类的方法上
     * 所以应该使用反射获取当前对象的方法对象
     */
    private Method getMethod(ProceedingJoinPoint pjp) {
        Method method = null;

        Signature signature = pjp.getSignature();
        MethodSignature methodSignature = (MethodSignature) signature;
        Method targetMethod = methodSignature.getMethod();

        try {
            method = pjp.getTarget().getClass().getMethod(pjp.getSignature().getName(), targetMethod.getParameterTypes());
        } catch (NoSuchMethodException | SecurityException e) {
            e.printStackTrace();
        }
        return method;
    }

    /**
     * 获取缓存的key
     * key 定义在注解上，支持SPEL表达式
     *
     * @param
     * @return
     */
    private String parseStringArg(String key, Method method, Object[] args) {
        //获取被拦截方法参数名列表(使用Spring支持类库)
        LocalVariableTableParameterNameDiscoverer u = new LocalVariableTableParameterNameDiscoverer();
        String[] paraNameArr = u.getParameterNames(method);

        //使用SPEL进行key的解析
        ExpressionParser parser = new SpelExpressionParser();
        //SPEL上下文
        StandardEvaluationContext context = new StandardEvaluationContext();

        //把方法参数放入SPEL上下文中
        for (int i = 0; i < paraNameArr.length; i++) {
            context.setVariable(paraNameArr[i], args[i]);
        }
        return parser.parseExpression(key).getValue(context, String.class);
    }
}
